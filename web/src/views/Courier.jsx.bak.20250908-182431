import React, { useEffect, useState } from 'react'
import { useAuth } from '../auth/AuthContext.jsx'
import { Bike, CheckCircle2, Clock, MapPin, Navigation, Power, RotateCcw } from 'lucide-react'

export default function Courier(){
  const { fetchWithAuth, user } = useAuth()
  const [online, setOnline] = useState(0)
  const [tab, setTab] = useState('mine') // mine | available
  const [orders, setOrders] = useState([])
  const [eta, setEta] = useState('')
  const [lat, setLat] = useState(null)
  const [lng, setLng] = useState(null)
  const [busy, setBusy] = useState(false)
  const canSee = user && (user.role==='courier' || user.role==='admin')

  useEffect(()=>{ if (!canSee) return; (async()=>{
    const d = await fetchWithAuth('/api/courier/profile').then(r=>r.json()).catch(()=>({}))
    setOnline(Number(d.courier_online||0))
  })() },[canSee])

  async function reload(){ 
    const d = await fetchWithAuth(`/api/courier/orders?mine=${tab==='mine'?1:0}`).then(r=>r.json()).catch(()=>({}))
    setOrders(d.orders||[])
  }
  useEffect(()=>{ if (canSee) reload() },[tab, canSee])

  function grabGPS(){
    if (!navigator.geolocation) return
    navigator.geolocation.getCurrentPosition(p=>{
      setLat(p.coords.latitude); setLng(p.coords.longitude)
    })
  }

  if (!canSee){
    return <div className="mx-auto max-w-screen-sm p-4">Kein Zugriff. (Rolle „courier“ oder „admin“ erforderlich)</div>
  }

  return (
    <div className="mx-auto max-w-screen-sm px-3 pb-28">
      {/* Header */}
      <div className="sticky top-0 z-20 backdrop-blur-md bg-slate-950/80 border-b border-slate-800">
        <div className="px-2 py-3 flex items-center gap-2">
          <div className="font-extrabold text-lg">Kurier</div>
          <div className="ml-auto flex items-center gap-2">
            <span className={`text-xs px-2 py-1 rounded-full border ${online? 'border-emerald-500 text-emerald-400 bg-emerald-500/10' : 'border-slate-600 text-slate-300 bg-slate-800/60'}`}>{online? 'Online' : 'Offline'}</span>
            <button className={`rounded-xl border px-3 py-2 text-sm ${online? 'border-emerald-600 bg-emerald-500/20':'border-slate-700 bg-slate-800'}`} onClick={async()=>{
              const next = online?0:1
              const r = await fetchWithAuth('/api/courier/profile',{method:'PUT',headers:{'content-type':'application/json'},body:JSON.stringify({courier_online:next})})
              if (r.ok){ setOnline(next); reload() }
            }}>
              <span className="inline-flex items-center gap-2"><Power size={16}/>{online?'Offline':'Online'}</span>
            </button>
          </div>
        </div>
        <div className="px-2 flex gap-2 pb-3">
          <button className={`flex-1 rounded-xl border px-3 py-2 text-sm ${tab==='mine'?'bg-emerald-500/20 border-emerald-600':'bg-slate-900 border-slate-700'}`} onClick={()=>setTab('mine')}>Meine</button>
          <button className={`flex-1 rounded-xl border px-3 py-2 text-sm ${tab!=='mine'?'bg-emerald-500/20 border-emerald-600':'bg-slate-900 border-slate-700'}`} onClick={()=>setTab('available')}>Verfügbar</button>
          <button className="rounded-xl border border-slate-700 px-3 py-2 text-sm" title="Neu laden" onClick={reload}><RotateCcw size={16}/></button>
        </div>
      </div>

      {/* Quick Update */}
      <div className="mt-3 rounded-xl border border-slate-800 bg-slate-900 p-3">
        <div className="text-xs text-slate-400 mb-2">Schnell-Update</div>
        <div className="grid grid-cols-3 gap-2">
          <input className="rounded-lg bg-slate-950 border border-slate-700 px-2 py-2 text-sm" placeholder="ETA (Min)" value={eta} onChange={e=>setEta(e.target.value)} />
          <input className="rounded-lg bg-slate-950 border border-slate-700 px-2 py-2 text-sm" placeholder="Lat" value={lat??''} onChange={e=>setLat(e.target.value)} />
          <input className="rounded-lg bg-slate-950 border border-slate-700 px-2 py-2 text-sm" placeholder="Lng" value={lng??''} onChange={e=>setLng(e.target.value)} />
        </div>
        <div className="mt-2 flex gap-2">
          <button className="flex-1 rounded-xl border border-slate-700 bg-slate-800 py-2 text-sm" onClick={grabGPS}>GPS übernehmen</button>
          <button className="flex-1 rounded-xl border border-emerald-600 bg-emerald-500/20 py-2 text-sm" disabled={busy} onClick={async()=>{
            if(orders[0]){ // optional: first selected
              setBusy(true)
              try{
                if (eta) await fetchWithAuth(`/api/courier/orders/${orders[0].id}/eta`,{method:'PUT',headers:{'content-type':'application/json'},body:JSON.stringify({eta_minutes:Number(eta)})})
                if (lat!=null && lng!=null) await fetchWithAuth(`/api/courier/orders/${orders[0].id}/location`,{method:'PUT',headers:{'content-type':'application/json'},body:JSON.stringify({lat:Number(lat),lng:Number(lng)})})
              }finally{ setBusy(false); reload() }
            }
          }}>Auf ersten Auftrag anwenden</button>
        </div>
      </div>

      {/* Orders */}
      <div className="mt-3 space-y-2">
        {orders.map(o=>(
          <div key={o.id} className="rounded-2xl border border-slate-800 bg-slate-900 p-3">
            <div className="flex items-center justify-between">
              <div className="font-semibold">#{o.id} • {(o.total_cents/100).toFixed(2)} €</div>
              {!o.courier_username && (
                <button className="rounded-lg border border-emerald-600 bg-emerald-500/20 px-3 py-1.5 text-sm"
                        onClick={async()=>{ const r=await fetchWithAuth(`/api/courier/orders/${o.id}/claim`,{method:'POST'}); if(r.ok) reload() }}>
                  Übernehmen
                </button>
              )}
            </div>
            <div className="text-xs text-slate-400">Status: {o.status} • ETA: {o.eta_minutes!=null?`${o.eta_minutes} min`:'—'} • Kunde: {o.user_username}</div>
            <div className="mt-2 grid grid-cols-2 gap-2">
              <button className="rounded-lg border border-slate-700 px-2 py-2 text-sm flex items-center justify-center gap-2"
                      onClick={async()=>{ if(eta) await fetchWithAuth(`/api/courier/orders/${o.id}/eta`,{method:'PUT',headers:{'content-type':'application/json'},body:JSON.stringify({eta_minutes:Number(eta)})}); reload() }}>
                <Clock size={16}/> ETA setzen
              </button>
              <button className="rounded-lg border border-slate-700 px-2 py-2 text-sm flex items-center justify-center gap-2"
                      onClick={async()=>{ if(lat!=null && lng!=null) await fetchWithAuth(`/api/courier/orders/${o.id}/location`,{method:'PUT',headers:{'content-type':'application/json'},body:JSON.stringify({lat:Number(lat),lng:Number(lng)})}); reload() }}>
                <MapPin size={16}/> Position
              </button>
              <button className="rounded-lg border border-slate-700 px-2 py-2 text-sm flex items-center justify-center gap-2"
                      onClick={async()=>{ await fetchWithAuth(`/api/courier/orders/${o.id}/status`,{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({status:'unterwegs'})}); reload() }}>
                <Bike size={16}/> Unterwegs
              </button>
              <button className="rounded-lg border border-slate-700 px-2 py-2 text-sm flex items-center justify-center gap-2"
                      onClick={async()=>{ await fetchWithAuth(`/api/courier/orders/${o.id}/status`,{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({status:'angekommen'})}); reload() }}>
                <Navigation size={16}/> Angekommen
              </button>
              <button className="col-span-2 rounded-lg border border-emerald-600 bg-emerald-500/20 px-2 py-2 text-sm flex items-center justify-center gap-2"
                      onClick={async()=>{ await fetchWithAuth(`/api/courier/orders/${o.id}/status`,{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({status:'abgeschlossen'})}); reload() }}>
                <CheckCircle2 size={16}/> Abgeschlossen
              </button>
            </div>
          </div>
        ))}
        {orders.length===0 && <div className="rounded-xl border border-slate-800 bg-slate-900 p-3">Keine Aufträge.</div>}
      </div>
    </div>
  )
}
