import React, { useEffect, useMemo, useState } from 'react'
import { ShoppingCart, X, Minus, Plus, LayoutGrid, List, Tag, Sparkles } from 'lucide-react'
import { useAuth } from '../auth/AuthContext.jsx'

function usePersistentCart(){
  const [cart, setCart] = useState(()=>{ try { return JSON.parse(localStorage.getItem('pf_cart')||'[]') } catch { return [] } })
  const persist = (c)=>{ setCart(c); localStorage.setItem('pf_cart', JSON.stringify(c)) }
  const add = (item)=>{ const next=[...cart]; const i=next.findIndex(x=>x.id===item.id && x.grams===item.grams); if(i>=0) next[i].qty+=item.qty||1; else next.push({...item, qty:item.qty||1}); persist(next) }
  const inc = (id,grams)=> persist(cart.map(x=> x.id===id && x.grams===grams ? {...x, qty:x.qty+1} : x))
  const dec = (id,grams)=> persist(cart.flatMap(x=> x.id===id && x.grams===grams ? (x.qty>1?[{...x, qty:x.qty-1}]:[]) : [x]))
  const clear = ()=> persist([])
  const total = cart.reduce((s,x)=> s + x.price_cents*x.qty, 0)
  const count = cart.reduce((s,x)=> s + x.qty, 0)
  return { cart, add, inc, dec, clear, total, count }
}

export default function Menu(){
  const { fetchWithAuth } = useAuth()
  const [categories, setCategories] = useState([])
  const [products, setProducts] = useState([])
  const [tiers, setTiers] = useState([])
  const [cat, setCat] = useState('all')
  const [q, setQ] = useState('')
  const [sale, setSale] = useState(false)
  const [feat, setFeat] = useState(false)
  const [view, setView] = useState('list')
  const [toast, setToast] = useState('')
  const [showCart, setShowCart] = useState(false)
  const [submitting, setSubmitting] = useState(false)
  const [selGrams, setSelGrams] = useState({}) // productId -> grams
  const cart = usePersistentCart()

  // Daten mit Fallbacks laden
  useEffect(()=>{ (async()=>{
    let cats = []
    try {
      const cr = await fetch('/api/categories').then(r=>r.ok?r.json():{categories:[]})
      cats = cr.categories||[]
    } catch {}
    let prod = []
    try {
      const pr = await fetch('/api/products').then(r=>r.json())
      prod = pr.products||[]
      if (!cats?.length) cats = pr.categories||[]
    } catch {}
    let t=[]
    try {
      t = (await fetch('/api/product-tiers').then(r=>r.ok?r.json():{tiers:[]})).tiers||[]
    } catch {}

    setCategories(cats)
    setProducts(prod)
    setTiers(t)
  })() },[])

  useEffect(()=>{ if (!toast) return; const t=setTimeout(()=>setToast(''), 1400); return ()=>clearTimeout(t) },[toast])

  const cats = useMemo(()=>[{id:'all', name:'Alle', highlight:0}, ...(categories||[])], [categories])

  const tiersMap = useMemo(()=>{
    const m = new Map()
    for (const t of (tiers||[])){
      const key = Number(t.product_id)
      if (!m.has(key)) m.set(key, [])
      m.get(key).push({ grams: Number(t.grams), price_cents: Number(t.price_cents) })
    }
    for (const [k,arr] of m) arr.sort((a,b)=>a.grams-b.grams)
    return m
  },[tiers])

  const shown = useMemo(()=>{
    const s = q.trim().toLowerCase()
    return (products||[]).filter(p=>{
      if (cat!=='all' && String(p.category_id)!==String(cat)) return false
      if (sale && p.sale_price_cents==null) return false
      if (feat && !p.featured) return false
      if (!s) return true
      return (p.name||'').toLowerCase().includes(s) || (p.category_name||'').toLowerCase().includes(s)
    })
  },[q, cat, sale, feat, products])

  function euroPerG(price_cents, grams){
    const g = Number(grams||1)
    return g>0 ? (price_cents/100)/g : 0
  }

  const addToCart = (p)=>{
    const list = tiersMap.get(p.id) || [{ grams:1, price_cents: Number(p.price_cents||0)}]
    const g = selGrams[p.id] ?? list[0].grams
    const tier = list.find(x=>x.grams===g) || list[0]
    cart.add({ id:p.id, grams: tier.grams, name:`${p.name} • ${tier.grams}g`, price_cents: tier.price_cents, image_url:p.image_url })
    setToast('Zum Warenkorb hinzugefügt')
  }

  async function doCheckout(){
    if (cart.cart.length===0 || submitting) return
    setSubmitting(true)
    try{
      const payload = { items: cart.cart.map(it=>({ product_id: it.id, grams: it.grams, qty: it.qty })), mode: 'pickup', pay_with_wallet: false }
      const fx = typeof fetchWithAuth === 'function' ? fetchWithAuth : fetch
      const r = await fx('/api/orders', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify(payload) })
      let d=null; try{ d=await r.json() }catch{}
      if (r.status===401){ setToast('Bitte einloggen'); setSubmitting(false); window.location.hash='#/login'; return }
      if (r.ok && d?.ok){ setToast(`✅ Bestellung #${d.order_id} erstellt`); cart.clear(); setShowCart(false) }
      else setToast('❌ Bestellung fehlgeschlagen')
    }catch{ setToast('❌ Netzwerk-/Serverfehler') }
    finally{ setSubmitting(false) }
  }

  return (
    <div>
      {/* HERO */}
      <div className="pf-hero space-y-2">
        <div className="flex items-center gap-2">
          <Sparkles size={18} className="opacity-70" />
          <div className="font-bold text-lg">Menü</div>
          <div className="ml-auto flex gap-2">
            <button className="btn-ghost" title="Ansicht" onClick={()=>setView(v=> v==='list' ? 'grid' : 'list')}>
              {view==='list' ? <LayoutGrid size={18}/> : <List size={18}/>}
            </button>
            <button className="btn-ghost" title="Sale" onClick={()=>setSale(s=>!s)}>
              <Tag size={18} className={sale?'opacity-100':'opacity-50'} />
            </button>
          </div>
        </div>
        <input className="input" placeholder="Suche…" value={q} onChange={e=>setQ(e.target.value)} />
        {/* Kategorie-Buttons */}
        <div className="pf-cats">
          {cats.map(c=>{
            const isActive = String(cat)===String(c.id)
            const cls = 'pf-catbtn ' + (isActive?'pf-catbtn--active ':'') + (c.highlight ? 'pf-catbtn--glow' : '')
            const style = c.highlight ? { '--pf-glow': c.highlight_color || '#22c55e' } : {}
            return (
              <button key={c.id} className={cls} style={style} onClick={()=>setCat(c.id)}>
                {c.name}
              </button>
            )
          })}
          <label className="pf-catbtn" style={{background:'transparent'}}>
            <input type="checkbox" checked={feat} onChange={e=>setFeat(e.target.checked)} />&nbsp;Highlights
          </label>
        </div>
      </div>

      {/* LISTE */}
      {shown.length===0 && <div className="card m-3">Keine Produkte gefunden.</div>}
      <div className={(view==='grid' ? 'grid grid-cols-2 gap-2 p-3' : 'pf-list')}>
        {shown.map(p=>{
          const list = tiersMap.get(p.id) || [{ grams:1, price_cents: Number(p.price_cents||0)}]
          const g = selGrams[p.id] ?? list[0].grams
          const current = list.find(x=>x.grams===g) || list[0]
          const perG = euroPerG(current.price_cents,current.grams)

          if (view==='grid'){
            return (
              <div key={p.id} className="pf-card">
                <div className="pf-row">
                  <div className="pf-thumb" style={{width:56,height:56}}>
                    {p.image_url && <img src={p.image_url} alt={p.name} loading="lazy" />}
                  </div>
                  <div className="flex-1">
                    <div className="pf-title text-[13px] line-clamp-2">{p.name}</div>
                    <div className="pf-meta">{p.category_name || '—'}</div>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {list.map(t=>{
                        const active = t.grams===g
                        return (
                          <button key={t.grams} className={'pf-qtychip '+(active?'pf-qtychip-active':'')}
                                  onClick={()=>setSelGrams(s=>({...s, [p.id]: t.grams}))}>
                            {t.grams}g
                          </button>
                        )
                      })}
                    </div>
                    <div className="mt-1 text-[13px]">
                      <span className="pf-price">{(current.price_cents/100).toFixed(2)} €</span>
                      <span className="pf-meta"> ({perG.toFixed(2)} €/g)</span>
                    </div>
                  </div>
                </div>
                <button className="btn w-full mt-2 py-2" onClick={()=>addToCart(p)}>
                  <ShoppingCart size={16} className="mr-1" /> In den Warenkorb
                </button>
              </div>
            )
          }

          // LIST (sehr kompakt)
          return (
            <div key={p.id} className="pf-card">
              <div className="pf-row">
                <div className="pf-thumb">{p.image_url && <img src={p.image_url} alt={p.name} loading="lazy" />}</div>
                <div className="flex-1">
                  <div className="pf-title">{p.name}</div>
                  <div className="pf-meta">{p.category_name || '—'}</div>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {list.map(t=>{
                      const active = t.grams===g
                      return (
                        <button key={t.grams} className={'pf-qtychip '+(active?'pf-qtychip-active':'')}
                                onClick={()=>setSelGrams(s=>({...s, [p.id]: t.grams}))}>
                          {t.grams}g
                        </button>
                      )
                    })}
                  </div>
                  <div className="mt-1 text-[13px]">
                    <span className="pf-price">{(current.price_cents/100).toFixed(2)} €</span>
                    <span className="pf-meta"> ({perG.toFixed(2)} €/g)</span>
                  </div>
                </div>
              </div>
              <button className="btn w-full mt-2 py-2" onClick={()=>addToCart(p)}>
                <ShoppingCart size={16} className="mr-1" /> In den Warenkorb
              </button>
            </div>
          )
        })}
      </div>

      {/* Floating Cart Button */}
      <button className="fixed right-3 bottom-20 btn z-30" onClick={()=>setShowCart(true)}>
        <ShoppingCart size={18} className="mr-2" /> {cart.count} • {(cart.total/100).toFixed(2)} €
      </button>

      {/* Cart Bottom Sheet */}
      {showCart && (
        <div className="pf-sheet" onClick={(e)=>{ if (e.target===e.currentTarget) setShowCart(false) }}>
          <div className="pf-sheet-panel">
            <div className="pf-handle" />
            <div className="pf-line">
              <div className="pf-line-title text-lg">Warenkorb</div>
              <button className="btn-ghost" onClick={()=>setShowCart(false)}><X size={16}/></button>
            </div>

            {cart.cart.length===0 ? (
              <div className="card mt-2">Der Warenkorb ist leer.</div>
            ) : (
              <>
                <div className="mt-2 space-y-2">
                  {cart.cart.map(x=>{
                    const euroG = (x.price_cents/100)/x.grams
                    return (
                      <div key={x.id+'-'+x.grams} className="pf-card pf-line">
                        <div className="flex items-center gap-2">
                          {x.image_url && <div className="pf-thumb" style={{width:40,height:40}}><img src={x.image_url} alt="" /></div>}
                          <div>
                            <div className="pf-title text-[14px]">{x.name}</div>
                            <div className="pf-meta">{x.grams}g • {(x.price_cents/100).toFixed(2)} € ({euroG.toFixed(2)} €/g)</div>
                          </div>
                        </div>
                        <div className="pf-qty">
                          <button onClick={()=>cart.dec(x.id, x.grams)}><Minus size={14}/></button>
                          <div className="w-6 text-center">{x.qty}</div>
                          <button onClick={()=>cart.inc(x.id, x.grams)}><Plus size={14}/></button>
                        </div>
                      </div>
                    )
                  })}
                </div>

                <div className="pf-total">
                  <div className="pf-meta">Zwischensumme</div>
                  <div className="text-xl font-extrabold">{(cart.total/100).toFixed(2)} €</div>
                </div>
                <div className="pf-actions">
                  <button className="btn-ghost flex-1" onClick={()=>cart.clear()}>Leeren</button>
                  <button className="btn flex-1" disabled={submitting} onClick={doCheckout}>
                    {submitting ? 'Sende…' : 'Zur Kasse'}
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {toast && <div className="pf-toast card px-3 py-2">{toast}</div>}
    </div>
  )
}
