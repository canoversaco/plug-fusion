import React, { useEffect, useMemo, useState } from 'react'
import { ShoppingCart, LayoutGrid, List, Tag } from 'lucide-react'
import { useAuth } from '../auth/AuthContext.jsx'

function usePersistentCart(){
  const [cart, setCart] = useState(()=>{ try { return JSON.parse(localStorage.getItem('pf_cart')||'[]') } catch { return [] } })
  const persist = (c)=>{ setCart(c); localStorage.setItem('pf_cart', JSON.stringify(c)) }
  const add = (p)=>{
    const next = [...cart]
    const i = next.findIndex(x=>x.id===p.id)
    if (i>=0) next[i].qty += 1
    else next.push({ id:p.id, name:p.name, price_cents: p.sale_price_cents ?? p.price_cents, qty:1, image_url:p.image_url })
    persist(next)
  }
  const inc = (id)=> persist(cart.map(x=> x.id===id ? {...x, qty:x.qty+1} : x))
  const dec = (id)=> persist(cart.flatMap(x=> x.id===id ? (x.qty>1 ? [{...x, qty:x.qty-1}] : []) : [x]))
  const clear = ()=> persist([])
  const total = cart.reduce((s,x)=> s + x.price_cents*x.qty, 0)
  const count = cart.reduce((s,x)=> s + x.qty, 0)
  return { cart, add, inc, dec, clear, total, count }
}

export default function Menu(){
  const { fetchWithAuth } = useAuth()
  const [data, setData] = useState({ categories:[], products:[] })
  const [cat, setCat] = useState('all')
  const [q, setQ] = useState('')
  const [sale, setSale] = useState(false)
  const [feat, setFeat] = useState(false)
  const [view, setView] = useState('list') // 'list' | 'grid'
  const [toast, setToast] = useState('')
  const [showCart, setShowCart] = useState(false)
  const cart = usePersistentCart()

  useEffect(()=>{ (async()=>{
    const d = await fetch('/api/products').then(r=>r.json()).catch(()=>({}))
    setData({ categories: d.categories||[], products: d.products||[] })
  })() },[])

  useEffect(()=>{ if (!toast) return; const t=setTimeout(()=>setToast(''), 1200); return ()=>clearTimeout(t) },[toast])

  const cats = useMemo(()=>[{id:'all', name:'Alle'}, ...data.categories], [data.categories])

  const shown = useMemo(()=>{
    const s = q.trim().toLowerCase()
    return (data.products||[]).filter(p=>{
      if (cat!=='all' && String(p.category_id)!==String(cat)) return false
      if (sale && p.sale_price_cents==null) return false
      if (feat && !p.featured) return false
      if (!s) return true
      return (p.name||'').toLowerCase().includes(s) || (p.category_name||'').toLowerCase().includes(s)
    })
  },[q, cat, sale, feat, data.products])

  const checkout = async ()=>{
    if (cart.cart.length===0) return
    const payload = { items: cart.cart.map(x=>({ product_id:x.id, qty:x.qty })), mode: 'pickup', pay_with_wallet: false }
    const r = await fetchWithAuth('/api/orders', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify(payload) })
    const d = await r.json().catch(()=>null)
    if (r.ok && d?.ok){ cart.clear(); setShowCart(false); setToast('✅ Bestellung erstellt') }
    else setToast('❌ Bestellung fehlgeschlagen')
  }

  return (
    <div className="space-y-3 pf-pb-safe">
      {/* Sticky: Suche & Controls */}
      <div className="pf-sticky p-3 space-y-2">
        <div className="flex gap-2">
          <input className="input flex-1" placeholder="Suche im Menü…" value={q} onChange={e=>setQ(e.target.value)} />
          <button className="btn-ghost" onClick={()=>setView(v=> v==='list'?'grid':'list')} title="Ansicht wechseln">
            {view==='list' ? <LayoutGrid size={18}/> : <List size={18}/>}
          </button>
          <button className="btn-ghost" onClick={()=>setSale(s=>!s)} title="Sale filtern">
            <Tag size={18} className={sale?'opacity-100':'opacity-50'} />
          </button>
        </div>
        {/* Klickbare Kategorien */}
        <div className="pf-catbar">
          {cats.map(c=>(
            <button key={c.id}
              onClick={()=>setCat(c.id)}
              className={'pf-chip ' + (String(cat)===String(c.id) ? 'pf-chip-active' : '')}>
              {c.name}
            </button>
          ))}
          <label className="pf-chip" style={{background:'transparent'}}>
            <input type="checkbox" checked={feat} onChange={e=>setFeat(e.target.checked)} />&nbsp;Highlights
          </label>
        </div>
      </div>

      {/* Produktliste kompakt */}
      {shown.length===0 && <div className="card m-3">Keine Produkte gefunden.</div>}

      <div className={(view==='grid' ? 'grid grid-cols-2 gap-2 p-3' : 'space-y-2 p-3')}>
        {shown.map(p=>{
          const price = (p.sale_price_cents ?? p.price_cents)/100
          const struck = p.sale_price_cents!=null
          if (view==='grid'){
            return (
              <div key={p.id} className="card p-0 overflow-hidden">
                <div className="pf-aspect-1-1">{p.image_url && <img src={p.image_url} alt={p.name} loading="lazy" />}</div>
                <div className="p-2">
                  <div className="font-semibold text-[13px] leading-snug line-clamp-2">{p.name}</div>
                  <div className="text-[13px] mt-1">
                    {struck && <span className="opacity-60 line-through mr-1">{(p.price_cents/100).toFixed(2)} €</span>}
                    <span className="font-semibold">{price.toFixed(2)} €</span>
                  </div>
                  <button className="btn w-full mt-2 py-2" onClick={()=>{ cart.add(p); setToast('Zum Warenkorb hinzugefügt') }}>
                    <ShoppingCart size={16} className="mr-1" /> In den Warenkorb
                  </button>
                </div>
              </div>
            )
          }
          // LIST – sehr kompakt
          return (
            <div key={p.id} className="card">
              <div className="pf-item">
                <div className="pf-thumb">{p.image_url && <img src={p.image_url} alt={p.name} loading="lazy" />}</div>
                <div className="flex-1">
                  <div className="font-semibold text-[14px] leading-tight line-clamp-2">{p.name}</div>
                  <div className="pf-meta">{p.category_name || '—'}</div>
                  <div className="mt-1 text-[13px]">
                    {struck && <span className="opacity-60 line-through mr-1">{(p.price_cents/100).toFixed(2)} €</span>}
                    <span className="pf-price">{price.toFixed(2)} €</span>
                  </div>
                </div>
              </div>
              <button className="btn w-full mt-2 py-2" onClick={()=>{ cart.add(p); setToast('Zum Warenkorb hinzugefügt') }}>
                <ShoppingCart size={16} className="mr-1" /> In den Warenkorb
              </button>
            </div>
          )
        })}
      </div>

      {/* Floating Cart Shortcut */}
      <button className="fixed right-3 bottom-20 btn z-30" onClick={()=>setShowCart(true)}>
        <ShoppingCart size={18} className="mr-2" /> {cart.count} • {(cart.total/100).toFixed(2)} €
      </button>

      {/* Warenkorb-Overlay */}
      {showCart && (
        <div className="fixed inset-0 z-40 bg-black/60 backdrop-blur-sm flex items-end" onClick={(e)=>{ if (e.target===e.currentTarget) setShowCart(false) }}>
          <div className="w-full bg-slate-950 border-t border-slate-800 rounded-t-2xl p-3 space-y-3 max-h-[80vh] overflow-auto">
            <div className="flex items-center justify-between">
              <div className="font-bold text-lg">Warenkorb</div>
              <button className="btn-ghost" onClick={()=>setShowCart(false)}>Schließen</button>
            </div>
            {cart.cart.length===0 ? (
              <div className="card">Der Warenkorb ist leer.</div>
            ) : (
              <>
                <div className="space-y-2">
                  {cart.cart.map(x=>(
                    <div key={x.id} className="card flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        {x.image_url && <div className="pf-thumb" style={{width:48,height:48}}><img src={x.image_url} alt="" /></div>}
                        <div>
                          <div className="font-semibold text-[14px] leading-tight line-clamp-2">{x.name}</div>
                          <div className="pf-meta">{(x.price_cents/100).toFixed(2)} €</div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <button className="btn-ghost" onClick={()=>cart.dec(x.id)}>-</button>
                        <div className="w-6 text-center">{x.qty}</div>
                        <button className="btn-ghost" onClick={()=>cart.inc(x.id)}>+</button>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="flex items-center justify-between">
                  <div className="pf-meta">Zwischensumme</div>
                  <div className="text-xl font-extrabold">{(cart.total/100).toFixed(2)} €</div>
                </div>
                <div className="flex gap-2">
                  <button className="btn-ghost flex-1" onClick={()=>cart.clear()}>Leeren</button>
                  <button className="btn flex-1" onClick={checkout}>Zur Kasse</button>
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {/* Mini-Toast */}
      {toast && (
        <div className="fixed left-1/2 -translate-x-1/2 bottom-24 z-50 card px-3 py-2">{toast}</div>
      )}
    </div>
  )
}
