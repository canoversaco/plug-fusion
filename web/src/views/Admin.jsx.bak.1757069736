import React, { useEffect, useState } from 'react'
import { useAuth } from '../auth/AuthContext.jsx'

export default function Admin(){
  const { fetchWithAuth } = useAuth()

  // --- Tab Steuerung ---
  const [tab, setTab] = useState('status') // status | highlight | catalog

  // === TAB 1: Bestellstatus ===
  const [oid, setOid] = useState('')
  const [status, setStatus] = useState('bestätigt')
  const [msg1, setMsg1] = useState('')
  const changeStatus = async ()=>{
    setMsg1('')
    const r = await fetchWithAuth(`/api/orders/${oid}/status`, {
      method:'POST', headers:{ 'content-type':'application/json' }, body: JSON.stringify({ status, note:'via Admin' })
    })
    const data = await r.json(); setMsg1(r.ok ? '✅ Status aktualisiert.' : ('Fehler: ' + (data?.error||'fail')))
  }

  // === TAB 2: Highlights ===
  const [items, setItems] = useState([])
  const [fProduct, setFProduct] = useState('')
  const [form, setForm] = useState({ featured:false, badge_text:'', badge_color:'#22c55e', highlight_title:'', highlight_desc:'', promo_until:'', sale_price_cents:'', banner_image_url:'', featured_order:0 })
  const [msg2, setMsg2] = useState('')

  const loadMeta = async ()=>{
    const r = await fetchWithAuth('/api/admin/product-meta')
    const data = await r.json()
    setItems(data.items||[])
  }
  useEffect(()=>{ loadMeta() },[])

  useEffect(()=>{
    const p = items.find(x => String(x.product_id||x.id) === String(fProduct))
    if (p){
      setForm({
        featured: !!(p.featured|0),
        badge_text: p.badge_text||'',
        badge_color: p.badge_color||'#22c55e',
        highlight_title: p.highlight_title||'',
        highlight_desc: p.highlight_desc||'',
        promo_until: p.promo_until||'',
        sale_price_cents: p.sale_price_cents ?? '',
        banner_image_url: p.banner_image_url||'',
        featured_order: p.featured_order||0
      })
    }
  }, [fProduct, items])

  const saveMeta = async ()=>{
    setMsg2('')
    if (!fProduct) return setMsg2('Bitte Produkt wählen.')
    const body = { product_id: Number(fProduct), ...form, sale_price_cents: form.sale_price_cents===''? null : Number(form.sale_price_cents) }
    const r = await fetchWithAuth('/api/admin/product-meta', {
      method:'POST', headers:{ 'content-type':'application/json' }, body: JSON.stringify(body)
    })
    const data = await r.json(); setMsg2(r.ok ? '✅ Gespeichert.' : ('Fehler: ' + (data?.error||'fail')))
    await loadMeta()
  }

  const onChange = (k,v)=> setForm(prev=>({...prev, [k]:v}))

  // === TAB 3: Katalog (Kategorien + Produkte) ===
  const [cats, setCats] = useState([])
  const [prods, setProds] = useState([])
  const [msg3, setMsg3] = useState('')

  const loadCatalog = async ()=>{
    const cs = await fetchWithAuth('/api/admin/categories').then(r=>r.json()).catch(()=>({categories:[]}))
    const ps = await fetchWithAuth('/api/admin/products').then(r=>r.json()).catch(()=>({products:[]}))
    setCats(cs.categories||[]); setProds(ps.products||[])
  }
  useEffect(()=>{ loadCatalog() },[])

  // Kategorie-Form
  const [cForm, setCForm] = useState({ id:'', name:'', position:0, active:true })
  const saveCategory = async ()=>{
    setMsg3('')
    const body = { ...cForm, id: cForm.id===''? null : Number(cForm.id), position: Number(cForm.position||0), active: !!cForm.active }
    const r = await fetchWithAuth('/api/admin/categories', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify(body) })
    const data = await r.json(); setMsg3(r.ok ? '✅ Kategorie gespeichert.' : ('Fehler: ' + (data?.error||'fail'))); await loadCatalog()
  }
  const delCategory = async (id)=>{
    if(!confirm('Kategorie löschen?')) return
    await fetchWithAuth('/api/admin/categories/'+id, { method:'DELETE' })
    await loadCatalog()
  }

  // Produkt-Form
  const [pForm, setPForm] = useState({ id:'', category_id:'', name:'', price_cents:'', active:true, image_url:'', description:'' })
  const saveProduct = async ()=>{
    setMsg3('')
    const body = { ...pForm,
      id: pForm.id===''? null : Number(pForm.id),
      category_id: pForm.category_id===''? null : Number(pForm.category_id),
      price_cents: pForm.price_cents===''? 0 : Number(pForm.price_cents),
      active: !!pForm.active
    }
    const r = await fetchWithAuth('/api/admin/products', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify(body) })
    const data = await r.json(); setMsg3(r.ok ? '✅ Produkt gespeichert.' : ('Fehler: ' + (data?.error||'fail'))); await loadCatalog()
  }
  const delProduct = async (id)=>{
    if(!confirm('Produkt löschen?')) return
    await fetchWithAuth('/api/admin/products/'+id, { method:'DELETE' })
    await loadCatalog()
  }

  return (
    <div className="space-y-6">
      <div className="flex gap-2">
        <button className={"btn-ghost " + (tab==='status'?'border-emerald-400':'')} onClick={()=>setTab('status')}>Bestellstatus</button>
        <button className={"btn-ghost " + (tab==='highlight'?'border-emerald-400':'')} onClick={()=>setTab('highlight')}>Produkt-Highlights</button>
        <button className={"btn-ghost " + (tab==='catalog'?'border-emerald-400':'')} onClick={()=>setTab('catalog')}>Katalog</button>
      </div>

      {tab==='status' && (
        <section className="card">
          <div className="font-semibold mb-2">Bestellstatus setzen</div>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
            <input className="input" placeholder="Order-ID" value={oid} onChange={e=>setOid(e.target.value)} />
            <select className="input" value={status} onChange={e=>setStatus(e.target.value)}>
              <option>wartet_bestätigung</option><option>bestätigt</option><option>unterwegs</option><option>zugestellt</option><option>abgebrochen</option>
            </select>
            <button className="btn" onClick={changeStatus}>Status setzen</button>
          </div>
          {msg1 ? <div className="mt-2 opacity-80">{msg1}</div> : null}
        </section>
      )}

      {tab==='highlight' && (
        <section className="card space-y-3">
          <div className="font-semibold">Produkt-Highlights</div>
          <select className="input" value={fProduct} onChange={e=>setFProduct(e.target.value)}>
            <option value="">— Produkt wählen —</option>
            {items.map(it=> <option key={it.id} value={it.id}>{it.name} (#{it.id})</option>)}
          </select>
          {fProduct && (
            <div className="grid gap-2">
              <div className="grid grid-cols-2 gap-2">
                <label className="flex items-center gap-2">
                  <input type="checkbox" checked={form.featured} onChange={e=>onChange('featured', e.target.checked)} /> Featured (Hero)
                </label>
                <input className="input" placeholder="Sortierung (featured_order)" type="number" value={form.featured_order} onChange={e=>onChange('featured_order', Number(e.target.value||0))} />
              </div>
              <div className="grid grid-cols-2 gap-2">
                <input className="input" placeholder="Badge-Text (z.B. Neu, Sale)" value={form.badge_text} onChange={e=>onChange('badge_text', e.target.value)} />
                <input className="input" placeholder="Badge-Farbe (#hex)" value={form.badge_color} onChange={e=>onChange('badge_color', e.target.value)} />
              </div>
              <input className="input" placeholder="Highlight Titel" value={form.highlight_title} onChange={e=>onChange('highlight_title', e.target.value)} />
              <input className="input" placeholder="Highlight Beschreibung" value={form.highlight_desc} onChange={e=>onChange('highlight_desc', e.target.value)} />
              <div className="grid grid-cols-2 gap-2">
                <input className="input" placeholder="Sale-Preis (Cent)" type="number" value={form.sale_price_cents} onChange={e=>onChange('sale_price_cents', e.target.value)} />
                <input className="input" placeholder="Promo bis (ISO yyyy-mm-dd)" value={form.promo_until} onChange={e=>onChange('promo_until', e.target.value)} />
              </div>
              <input className="input" placeholder="Banner-Bild URL" value={form.banner_image_url} onChange={e=>onChange('banner_image_url', e.target.value)} />
              <button className="btn" onClick={saveMeta}>Speichern</button>
              {msg2 ? <div className="opacity-80">{msg2}</div> : null}
            </div>
          )}
        </section>
      )}

      {tab==='catalog' && (
        <section className="space-y-4">
          <div className="card">
            <div className="font-semibold mb-2">Kategorie</div>
            <div className="grid sm:grid-cols-2 gap-2">
              <input className="input" placeholder="ID (leer = neu)" value={cForm.id} onChange={e=>setCForm({...cForm, id:e.target.value})}/>
              <input className="input" placeholder="Name" value={cForm.name} onChange={e=>setCForm({...cForm, name:e.target.value})}/>
              <input className="input" placeholder="Position" type="number" value={cForm.position} onChange={e=>setCForm({...cForm, position:e.target.value})}/>
              <label className="flex items-center gap-2"><input type="checkbox" checked={cForm.active} onChange={e=>setCForm({...cForm, active:e.target.checked})}/> aktiv</label>
              <button className="btn" onClick={saveCategory}>Speichern</button>
            </div>
            <div className="mt-3 text-sm opacity-80">{msg3}</div>
            <div className="mt-3">
              <div className="text-sm opacity-80 mb-1">Bestehende Kategorien</div>
              <div className="grid gap-2">
                {cats.map(c=>(
                  <div key={c.id} className="flex items-center justify-between border border-slate-800 rounded-xl px-3 py-2">
                    <div>#{c.id} — {c.name} (pos {c.position}) {c.active? '' : <span className="opacity-60">(inaktiv)</span>}</div>
                    <div className="flex gap-2">
                      <button className="btn-ghost" onClick={()=>setCForm({ id:String(c.id), name:c.name, position:c.position, active:!!c.active })}>Edit</button>
                      <button className="btn-ghost" onClick={()=>delCategory(c.id)}>Löschen</button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="card">
            <div className="font-semibold mb-2">Produkt</div>
            <div className="grid sm:grid-cols-2 gap-2">
              <input className="input" placeholder="ID (leer = neu)" value={pForm.id} onChange={e=>setPForm({...pForm, id:e.target.value})}/>
              <select className="input" value={pForm.category_id} onChange={e=>setPForm({...pForm, category_id:e.target.value})}>
                <option value="">— Kategorie —</option>
                {cats.map(c=> <option key={c.id} value={c.id}>{c.name}</option>)}
              </select>
              <input className="input" placeholder="Name" value={pForm.name} onChange={e=>setPForm({...pForm, name:e.target.value})}/>
              <input className="input" placeholder="Preis (Cent)" type="number" value={pForm.price_cents} onChange={e=>setPForm({...pForm, price_cents:e.target.value})}/>
              <input className="input" placeholder="Bild-URL" value={pForm.image_url} onChange={e=>setPForm({...pForm, image_url:e.target.value})}/>
              <input className="input" placeholder="Beschreibung" value={pForm.description} onChange={e=>setPForm({...pForm, description:e.target.value})}/>
              <label className="flex items-center gap-2"><input type="checkbox" checked={pForm.active} onChange={e=>setPForm({...pForm, active:e.target.checked})}/> aktiv</label>
              <button className="btn" onClick={saveProduct}>Speichern</button>
            </div>
            <div className="mt-3">
              <div className="text-sm opacity-80 mb-1">Produkte</div>
              <div className="grid gap-2">
                {prods.map(p=>(
                  <div key={p.id} className="flex items-center justify-between border border-slate-800 rounded-xl px-3 py-2">
                    <div>#{p.id} — {p.name} · {((p.price_cents||0)/100).toFixed(2)} € · {p.category_name||'—'}</div>
                    <div className="flex gap-2">
                      <button className="btn-ghost" onClick={()=>setPForm({
                        id:String(p.id), category_id:String(p.category_id||''), name:p.name,
                        price_cents:String(p.price_cents||0), image_url:p.image_url||'', description:p.description||'', active:!!p.active
                      })}>Edit</button>
                      <button className="btn-ghost" onClick={()=>delProduct(p.id)}>Löschen</button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

        </section>
      )}
    </div>
  )
}
