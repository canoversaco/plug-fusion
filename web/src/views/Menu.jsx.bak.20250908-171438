import React, { useEffect, useMemo, useState } from 'react'
import { ShoppingCart, LayoutGrid, List, Tag } from 'lucide-react'
import { useAuth } from '../auth/AuthContext.jsx'

/** Fallback-API-Caller, falls fetchWithAuth nicht greift */
async function callApiAuth(path, init={}){
  try{
    const tokenCandidates = ['pf_token','token','jwt','auth','pf_auth','plug_token','pf_user']
    let token = null
    for (const k of tokenCandidates){
      const raw = localStorage.getItem(k)
      if (!raw) continue
      if (/^eyJ/.test(raw)) { token = raw; break }
      try {
        const obj = JSON.parse(raw)
        if (obj?.token && /^eyJ/.test(obj.token)) { token = obj.token; break }
        if (obj?.jwt && /^eyJ/.test(obj.jwt))     { token = obj.jwt; break }
      } catch {}
    }
    const headers = Object.assign({'content-type':'application/json'}, init.headers||{})
    if (token) headers.Authorization = 'Bearer '+token
    const res = await fetch(path, Object.assign({}, init, { headers }))
    return res
  }catch(e){
    return new Response(JSON.stringify({error:'network'}), {status:599})
  }
}

function usePersistentCart(){
  const [cart, setCart] = useState(()=>{ try { return JSON.parse(localStorage.getItem('pf_cart')||'[]') } catch { return [] } })
  const persist = (c)=>{ setCart(c); localStorage.setItem('pf_cart', JSON.stringify(c)) }
  const add = (item)=>{ const next=[...cart]; const i=next.findIndex(x=>x.id===item.id && x.grams===item.grams); if(i>=0) next[i].qty+=item.qty||1; else next.push({...item, qty:item.qty||1}); persist(next) }
  const inc = (id,grams)=> persist(cart.map(x=> x.id===id && x.grams===grams ? {...x, qty:x.qty+1} : x))
  const dec = (id,grams)=> persist(cart.flatMap(x=> x.id===id && x.grams===grams ? (x.qty>1?[{...x, qty:x.qty-1}]:[]) : [x]))
  const clear = ()=> persist([])
  const total = cart.reduce((s,x)=> s + x.price_cents*x.qty, 0)
  const count = cart.reduce((s,x)=> s + x.qty, 0)
  return { cart, add, inc, dec, clear, total, count }
}

export default function Menu(){
  const auth = useAuth?.() || {}
  const fetchWithAuth = auth.fetchWithAuth
  const [categories, setCategories] = useState([])
  const [products, setProducts] = useState([])
  const [tiers, setTiers] = useState([])
  const [cat, setCat] = useState('all')
  const [q, setQ] = useState('')
  const [sale, setSale] = useState(false)
  const [feat, setFeat] = useState(false)
  const [view, setView] = useState('list')
  const [toast, setToast] = useState('')
  const [showCart, setShowCart] = useState(false)
  const [selGrams, setSelGrams] = useState({}) // productId -> grams
  const [submitting, setSubmitting] = useState(false)
  const cart = usePersistentCart()

  useEffect(()=>{ (async()=>{
    // Produkte (liefert i.d.R. auch categories mit)
    const prodRes = await fetch('/api/products').then(r=>r.json()).catch(()=>({}))
    setProducts(prodRes.products||[])
    let cats = prodRes.categories || []
    // Public /api/categories bevorzugen (Highlight/Glow)
    try {
      const cr = await fetch('/api/categories').then(r=> r.ok? r.json(): {categories:[]})
      if (cr?.categories?.length) cats = cr.categories
    } catch {}
    setCategories(cats)
    // Preis-Tiers
    try {
      const tr = await fetch('/api/product-tiers').then(r=> r.ok? r.json(): {tiers:[]})
      setTiers(tr.tiers||[])
    } catch { setTiers([]) }
  })() },[])

  useEffect(()=>{ if (!toast) return; const t=setTimeout(()=>setToast(''), 1400); return ()=>clearTimeout(t) },[toast])

  const cats = useMemo(()=>[{id:'all', name:'Alle', highlight:0}, ...categories], [categories])

  const tiersMap = useMemo(()=>{
    const m = new Map()
    for (const t of (tiers||[])){
      const key = Number(t.product_id)
      if (!m.has(key)) m.set(key, [])
      m.get(key).push({ grams: Number(t.grams), price_cents: Number(t.price_cents) })
    }
    for (const arr of m.values()) arr.sort((a,b)=>a.grams-b.grams)
    return m
  },[tiers])

  const shown = useMemo(()=>{
    const s = q.trim().toLowerCase()
    return (products||[]).filter(p=>{
      if (cat!=='all' && String(p.category_id)!==String(cat)) return false
      if (sale && p.sale_price_cents==null) return false
      if (feat && !p.featured) return false
      if (!s) return true
      return (p.name||'').toLowerCase().includes(s) || (p.category_name||'').toLowerCase().includes(s)
    })
  },[q, cat, sale, feat, products])

  function addToCart(p){
    const fallback = [{ grams:1, price_cents: Number(p.price_cents||0)}]
    const list = tiersMap.get(p.id) || fallback
    const g = selGrams[p.id] ?? list[0].grams
    const tier = list.find(x=>x.grams===g) || list[0]
    cart.add({ id:p.id, grams: tier.grams, name:`${p.name} • ${tier.grams}g`, price_cents: tier.price_cents, image_url:p.image_url })
    setToast('Zum Warenkorb hinzugefügt')
  }

  async function doCheckout(){
    if (!cart.cart.length || submitting) return
    setSubmitting(true)
    const payload = { items: cart.cart.map(it=>({ product_id: it.id, grams: it.grams, qty: it.qty })), mode:'pickup', pay_with_wallet:false }
    try{
      const doFetch = fetchWithAuth
        ? (url, init)=>fetchWithAuth(url, init)
        : (url, init)=>callApiAuth(url, init)
      const r = await doFetch('/api/orders', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify(payload) })
      const d = await r.json().catch(()=>null)
      if (r.ok && d?.ok){
        cart.clear()
        setShowCart(false)
        setToast('✅ Bestellung erstellt')
      } else {
        setToast('❌ Bestellung fehlgeschlagen' + (d?.error? ` (${d.error})` : ''))
      }
    }catch(e){
      setToast('❌ Netzwerkfehler')
    }finally{
      setSubmitting(false)
    }
  }

  return (
    <div className="mf-pb-safe">
      {/* Sticky: Suche + Kategorie-Buttons */}
      <div className="mf-sticky mf-section space-y-2">
        <div className="mf-row">
          <input className="input flex-1" placeholder="Suche im Menü…" value={q} onChange={e=>setQ(e.target.value)} />
          <button className="btn-ghost" onClick={()=>setView(v=> v==='list'?'grid':'list')} title="Ansicht wechseln">
            {view==='list' ? <LayoutGrid size={18}/> : <List size={18}/>}
          </button>
          <button className="btn-ghost" onClick={()=>setSale(s=>!s)} title="Sale filtern">
            <Tag size={18} className={sale?'opacity-100':'opacity-50'} />
          </button>
        </div>
        <div className="mf-catbar">
          {cats.map(c=>{
            const isActive = String(cat)===String(c.id)
            const cls = 'mf-catbtn ' + (isActive?'mf-catbtn--active ':'') + (c.highlight ? 'mf-catbtn--glow' : '')
            const style = c.highlight ? { '--mf-glow': c.highlight_color || '#22c55e' } : {}
            return <button key={c.id} className={cls} style={style} onClick={()=>setCat(c.id)}>{c.name}</button>
          })}
          <label className="mf-catbtn" style={{background:'transparent'}}>
            <input type="checkbox" checked={feat} onChange={e=>setFeat(e.target.checked)} />&nbsp;Highlights
          </label>
        </div>
      </div>

      {/* Produktliste – super kompakt */}
      <div className={view==='grid' ? 'grid grid-cols-2 gap-2 p-3' : 'space-y-2 p-3'}>
        {shown.map(p=>{
          const list = tiersMap.get(p.id) || [{ grams:1, price_cents: Number(p.price_cents||0)}]
          const g = selGrams[p.id] ?? list[0].grams
          const current = list.find(x=>x.grams===g) || list[0]
          const perG = (current.price_cents / current.grams) / 100

          if (view==='grid'){
            return (
              <div key={p.id} className="mf-card">
                <div className="mf-row" style={{alignItems:'flex-start'}}>
                  <div className="mf-thumb" style={{width:64,height:64}}>{p.image_url && <img src={p.image_url} alt={p.name} loading="lazy" />}</div>
                  <div className="flex-1">
                    <div className="mf-name">{p.name}</div>
                    <div className="mf-meta">{p.category_name||'—'}</div>
                    <div className="mf-row" style={{flexWrap:'wrap', gap:'.35rem', marginTop:'.35rem'}}>
                      {list.map(t=>{
                        const on = t.grams===g
                        return <button key={t.grams} className={'mf-qtychip '+(on?'mf-qtychip--on':'')} onClick={()=>setSelGrams(s=>({...s, [p.id]: t.grams}))}>{t.grams}g</button>
                      })}
                    </div>
                    <div className="mf-meta" style={{marginTop:'.25rem'}}>
                      <span className="mf-price">{(current.price_cents/100).toFixed(2)} €</span> <span>({perG.toFixed(2)} €/g)</span>
                    </div>
                    <button className="btn w-full mt-2 py-2" onClick={()=>addToCart(p)}>
                      <ShoppingCart size={16} className="mr-1" /> In den Warenkorb
                    </button>
                  </div>
                </div>
              </div>
            )
          }

          // LIST
          return (
            <div key={p.id} className="mf-card">
              <div className="mf-row" style={{alignItems:'flex-start'}}>
                <div className="mf-thumb">{p.image_url && <img src={p.image_url} alt={p.name} loading="lazy" />}</div>
                <div className="flex-1">
                  <div className="mf-name">{p.name}</div>
                  <div className="mf-meta">{p.category_name||'—'}</div>
                  <div className="mf-row" style={{flexWrap:'wrap', gap:'.35rem', marginTop:'.25rem'}}>
                    {list.map(t=>{
                      const on = t.grams===g
                      return <button key={t.grams} className={'mf-qtychip '+(on?'mf-qtychip--on':'')} onClick={()=>setSelGrams(s=>({...s, [p.id]: t.grams}))}>{t.grams}g</button>
                    })}
                  </div>
                  <div className="mf-meta" style={{marginTop:'.25rem'}}>
                    <span className="mf-price">{(current.price_cents/100).toFixed(2)} €</span> <span>({perG.toFixed(2)} €/g)</span>
                  </div>
                </div>
              </div>
              <button className="btn w-full mt-2 py-2" onClick={()=>addToCart(p)}>
                <ShoppingCart size={16} className="mr-1" /> In den Warenkorb
              </button>
            </div>
          )
        })}

        {shown.length===0 && (
          <div className="mf-card">Keine Produkte gefunden.</div>
        )}
      </div>

      {/* Floating Cart */}
      <button className="fixed right-3 bottom-20 btn z-30" onClick={()=>setShowCart(true)}>
        <ShoppingCart size={18} className="mr-2" /> {cart.count} • {(cart.total/100).toFixed(2)} €
      </button>

      {/* Cart Overlay + Checkout */}
      {showCart && (
        <div className="fixed inset-0 z-40 bg-black/60 backdrop-blur-sm flex items-end" onClick={(e)=>{ if (e.target===e.currentTarget) setShowCart(false) }}>
          <div className="w-full bg-slate-950 border-t border-slate-800 rounded-t-2xl p-3 space-y-3 max-h-[80vh] overflow-auto">
            <div className="mf-row" style={{justifyContent:'space-between'}}>
              <div className="font-bold text-lg">Warenkorb</div>
              <button className="btn-ghost" onClick={()=>setShowCart(false)}>Schließen</button>
            </div>
            {cart.cart.length===0 ? (
              <div className="mf-card">Der Warenkorb ist leer.</div>
            ) : (
              <>
                <div className="space-y-2">
                  {cart.cart.map(x=>{
                    const perG = (x.price_cents/x.grams)/100
                    return (
                      <div key={x.id+'-'+x.grams} className="mf-card">
                        <div className="mf-row" style={{justifyContent:'space-between'}}>
                          <div className="mf-row">
                            {x.image_url && <div className="mf-thumb" style={{width:42,height:42}}><img src={x.image_url} alt="" /></div>}
                            <div>
                              <div className="mf-name">{x.name}</div>
                              <div className="mf-meta">{x.grams}g • {(x.price_cents/100).toFixed(2)} € • {perG.toFixed(2)} €/g</div>
                            </div>
                          </div>
                          <div className="mf-row">
                            <button className="btn-ghost" onClick={()=>cart.dec(x.id, x.grams)}>-</button>
                            <div style={{width:'1.5rem', textAlign:'center'}}>{x.qty}</div>
                            <button className="btn-ghost" onClick={()=>cart.inc(x.id, x.grams)}>+</button>
                          </div>
                        </div>
                      </div>
                    )
                  })}
                </div>
                <div className="mf-row" style={{justifyContent:'space-between'}}>
                  <div className="mf-meta">Zwischensumme</div>
                  <div className="text-xl font-extrabold">{(cart.total/100).toFixed(2)} €</div>
                </div>
                <div className="mf-row">
                  <button className="btn-ghost flex-1" onClick={()=>cart.clear()}>Leeren</button>
                  <button className="btn flex-1" disabled={submitting} onClick={doCheckout}>
                    {submitting ? 'Bitte warten…' : 'Zur Kasse'}
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {toast && <div className="mf-toast mf-card">{toast}</div>}
    </div>
  )
}
